<%- include('../partials/head', {title:'prout'}) %>
<%- include("../partials/header") %>
    <!-- Main Content -->
    <main class="main">
      <!-- Hero Section -->
      <section class="hero" id="home">
        <div class="container">
          <div class="hero-content">
            <h1 class="hero-title">
              Bienvenue sur <span class="text-accent">Marmiplon</span>
            </h1>
            <p class="hero-description">
              D√©couvrez une collection de recettes d√©licieuses et faciles √†
              pr√©parer. Des entr√©es aux desserts, trouvez l'inspiration pour vos
              repas quotidiens.
            </p>
            <div class="hero-actions">
              <a href="#categories" class="btn btn-primary">
                D√©couvrir les recettes
              </a>
              <a href="#search-input" class="btn btn-secondary">
                Rechercher une recette
              </a>
            </div>
          </div>

          <div class="hero-card">
            <span class="hero-icon">üë®‚Äçüç≥</span>
            <h3>Cuisine avec passion</h3>
            <p>Des recettes test√©es et approuv√©es</p>
          </div>
        </div>
      </section>

      <!-- Search Section -->
      <section class="search-section" id="search">
        <div class="container">
          <h2 class="section-title">Rechercher une recette</h2>
          <div class="search-container">
            <form class="search-form" id="search-form">
              <div class="search-input-group">
                <input
                  type="text"
                  id="search-input"
                  class="search-input"
                  placeholder="Tapez le nom d'une recette ou d'un ingr√©dient..."
                  autocomplete="off"
                />
                <button
                  type="submit"
                  class="search-btn"
                  aria-label="Rechercher"
                >
                  <span class="search-icon">üîç</span>
                </button>
              </div>
            </form>

            <!-- R√©sultats de recherche -->
            <div
              class="search-results"
              id="search-results"
              style="display: none"
            >
              <h3 class="search-results-title">R√©sultats de recherche</h3>
              <div class="search-results-list" id="search-results-list">
                <!-- Les r√©sultats seront ins√©r√©s ici via JavaScript -->
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Categories Section -->
      <section class="categories-section" id="categories">
        <div class="container">
          <h2 class="section-title">Nos cat√©gories</h2>
          <p class="section-description">
            Explorez nos diff√©rentes cat√©gories de recettes pour tous les go√ªts
          </p>

          <div class="categories-grid" id="categories-grid">
            <!-- Les cat√©gories seront charg√©es ici via JavaScript -->
            <div class="loading-spinner" id="categories-loading">
              <div class="spinner"></div>
              <p>Chargement des cat√©gories...</p>
            </div>
          </div>
        </div>
      </section>

      <!-- Popular Recipes Section -->
      <section class="popular-section" id="popular">
        <div class="container">
          <h2 class="section-title">Recettes populaires</h2>
          <div class="recipes-grid" id="popular-recipes">
            <!-- Les recettes populaires seront charg√©es ici -->
            <div class="loading-spinner" id="recipes-loading">
              <div class="spinner"></div>
              <p>Chargement des recettes...</p>
            </div>
          </div>
        </div>
      </section>
    </main>

    <!-- Recipe Detail Modal -->
    <div class="modal" id="recipe-modal">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title" id="modal-recipe-title">
            Titre de la recette
          </h2>
          <button class="modal-close" id="modal-close">&times;</button>
        </div>
        <div class="modal-body" id="modal-body">
          <!-- Le contenu de la recette sera charg√© ici -->
        </div>
      </div>
    </div>

   

    <!-- Messages de notification -->
    <div class="notification" id="notification" style="display: none">
      <span class="notification-message" id="notification-message"></span>
      <button class="notification-close" id="notification-close">
        &times;
      </button>
    </div>

    <script>
      // === CLASSE PRINCIPALE DE L'APPLICATION ===
      class MarmiplonApp {
        constructor() {
          this.currentRecipe = null;
          this.searchResults = [];
          this.init();
        }

        /**
         * Initialise l'application
         */
        init() {
          this.bindEvents();
          this.loadCategories();
          this.loadPopularRecipes();
          this.updateStats();
          this.showNotification("Bienvenue sur Marmiplon !", "success");
        }

        /**
         * Lie les √©v√©nements aux √©l√©ments DOM
         */
        bindEvents() {
          // Navigation mobile
          const navToggle = document.getElementById("nav-toggle");
          const navMenu = document.getElementById("nav-menu");

          navToggle?.addEventListener("click", () => {
            navMenu.classList.toggle("active");
          });

          // Recherche
          const searchForm = document.getElementById("search-form");
          const searchInput = document.getElementById("search-input");

          searchForm?.addEventListener("submit", (e) => {
            e.preventDefault();
            this.performSearch(searchInput.value.trim());
          });

          // Recherche en temps r√©el
          searchInput?.addEventListener("input", (e) => {
            const query = e.target.value.trim();
            if (query.length >= 2) {
              this.performSearch(query);
            } else if (query.length === 0) {
              this.hideSearchResults();
            }
          });

          // Modal
          const modal = document.getElementById("recipe-modal");
          const modalClose = document.getElementById("modal-close");

          modalClose?.addEventListener("click", () => {
            this.closeModal();
          });

          modal?.addEventListener("click", (e) => {
            if (e.target === modal) {
              this.closeModal();
            }
          });

          // Escape key pour fermer la modal
          document.addEventListener("keydown", (e) => {
            if (e.key === "Escape" && modal.classList.contains("active")) {
              this.closeModal();
            }
          });

          // Navigation fluide
          document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
            anchor.addEventListener("click", (e) => {
              e.preventDefault();
              const target = document.querySelector(
                anchor.getAttribute("href")
              );
              if (target) {
                target.scrollIntoView({
                  behavior: "smooth",
                  block: "start",
                });
              }
            });
          });

          // Notification
          const notificationClose =
            document.getElementById("notification-close");
          notificationClose?.addEventListener("click", () => {
            this.hideNotification();
          });
        }

        /**
         * Charge et affiche les cat√©gories
         */
        loadCategories() {
          const categoriesGrid = document.getElementById("categories-grid");
          const loading = document.getElementById("categories-loading");

          if (!categoriesGrid) return;

          // Simulation d'un d√©lai de chargement
          setTimeout(() => {
            loading?.remove();

            categories.forEach((category) => {
              const recipesInCategory = this.getRecipesByCategory(category.id);
              const categoryCard = this.createCategoryCard(
                category,
                recipesInCategory.length
              );
              categoriesGrid.appendChild(categoryCard);
            });
          }, 1000);
        }

        /**
         * Cr√©e une carte de cat√©gorie
         */
        createCategoryCard(category, recipeCount) {
          const card = document.createElement("div");
          card.className = "category-card fade-in";

          const icons = {
            1: "ü•ó", // Entr√©es
            2: "üçΩÔ∏è", // Plats principaux
            3: "üç∞", // Desserts
          };

          card.innerHTML = `
                    <div class="category-icon">${
                      icons[category.id] || "üç≥"
                    }</div>
                    <h3>${category.name}</h3>
                    <p>${category.description}</p>
                    <span class="category-count">${recipeCount} recette${
            recipeCount > 1 ? "s" : ""
          }</span>
                `;

          card.addEventListener("click", () => {
            this.showCategoryRecipes(category.id);
          });

          return card;
        }

        /**
         * Charge et affiche les recettes populaires
         */
        loadPopularRecipes() {
          const recipesGrid = document.getElementById("popular-recipes");
          const loading = document.getElementById("recipes-loading");

          if (!recipesGrid) return;

          // Simulation d'un d√©lai de chargement
          setTimeout(() => {
            loading?.remove();

            recipes.forEach((recipe) => {
              const recipeCard = this.createRecipeCard(recipe);
              recipesGrid.appendChild(recipeCard);
            });
          }, 1500);
        }

       
        /**
         * G√©n√®re les √©toiles pour la notation
         */
        generateStars(rating) {
          const fullStars = "‚òÖ".repeat(rating);
          const emptyStars = "‚òÜ".repeat(5 - rating);
          return fullStars + emptyStars;
        }

        /**
         * R√©cup√®re les recettes par cat√©gorie
         */
        getRecipesByCategory(categoryId) {
          const categoryRanges = {
            1: [101, 199], // Entr√©es
            2: [201, 299], // Plats principaux
            3: [301, 399], // Desserts
          };

          const range = categoryRanges[categoryId];
          if (!range) return [];

          return recipes.filter(
            (recipe) => recipe.id >= range[0] && recipe.id <= range[1]
          );
        }

        /**
         * Affiche les recettes d'une cat√©gorie
         */
        showCategoryRecipes(categoryId) {
          const categoryRecipes = this.getRecipesByCategory(categoryId);
          const category = categories.find((c) => c.id === categoryId);

          if (!category) return;

          // Scroll vers la section des recettes et mise √† jour du contenu
          const recipesSection = document.getElementById("popular");
          const recipesGrid = document.getElementById("popular-recipes");
          const sectionTitle = recipesSection.querySelector(".section-title");

          sectionTitle.textContent = `Recettes - ${category.name}`;
          recipesGrid.innerHTML = "";

          categoryRecipes.forEach((recipe) => {
            const recipeCard = this.createRecipeCard(recipe);
            recipesGrid.appendChild(recipeCard);
          });

          recipesSection.scrollIntoView({ behavior: "smooth" });
          this.showNotification(
            `${categoryRecipes.length} recettes trouv√©es dans ${category.name}`,
            "success"
          );
        }

        /**
         * Effectue une recherche
         */
        performSearch(query) {
          if (!query) {
            this.hideSearchResults();
            return;
          }

          const results = this.searchRecipes(query);
          this.displaySearchResults(results, query);
        }

        /**
         * Recherche dans les recettes et ingr√©dients
         */
        searchRecipes(query) {
          const queryLower = query.toLowerCase();
          const results = [];

          // Recherche dans les titres et descriptions des recettes
          recipes.forEach((recipe) => {
            if (
              recipe.title.toLowerCase().includes(queryLower) ||
              recipe.description.toLowerCase().includes(queryLower)
            ) {
              results.push({
                type: "recipe",
                data: recipe,
                matchType: "title",
              });
            }
          });

          // Recherche dans les ingr√©dients
          ingredients.forEach((ingredient) => {
            if (ingredient.name.toLowerCase().includes(queryLower)) {
              const recipesWithIngredient = recipeIngredients
                .filter((ri) => ri.ingredientId === ingredient.id)
                .map((ri) => recipes.find((r) => r.id === ri.recipeId))
                .filter(
                  (r) => r && !results.some((result) => result.data.id === r.id)
                );

              recipesWithIngredient.forEach((recipe) => {
                results.push({
                  type: "recipe",
                  data: recipe,
                  matchType: "ingredient",
                  matchedIngredient: ingredient.name,
                });
              });
            }
          });

          return results;
        }

        /**
         * Affiche les r√©sultats de recherche
         */
        displaySearchResults(results, query) {
          const searchResults = document.getElementById("search-results");
          const searchResultsList = document.getElementById(
            "search-results-list"
          );
          const searchResultsTitle = document.querySelector(
            ".search-results-title"
          );

          if (!searchResults || !searchResultsList) return;

          searchResultsTitle.textContent = `R√©sultats pour "${query}" (${
            results.length
          } trouv√©${results.length > 1 ? "s" : ""})`;
          searchResultsList.innerHTML = "";

          if (results.length === 0) {
            searchResultsList.innerHTML = `
                        <div style="text-align: center; padding: 2rem; color: var(--gray-medium);">
                            <p>Aucun r√©sultat trouv√© pour "${query}"</p>
                            <p style="font-size: 0.9rem; margin-top: 0.5rem;">Essayez avec d'autres mots-cl√©s</p>
                        </div>
                    `;
          } else {
            results.forEach((result) => {
              const resultCard = this.createSearchResultCard(result);
              searchResultsList.appendChild(resultCard);
            });
          }

          searchResults.style.display = "block";
        }

        /**
         * Cr√©e une carte de r√©sultat de recherche
         */
        createSearchResultCard(result) {
          const card = document.createElement("div");
          card.className = "recipe-card fade-in";
          card.style.marginBottom = "var(--spacing-md)";

          const matchInfo =
            result.matchType === "ingredient"
              ? `<small style="color: var(--accent-color);">Contient: ${result.matchedIngredient}</small>`
              : "";

          card.innerHTML = `
                    <div class="recipe-image">
                        [Image: ${result.data.title}]
                    </div>
                    <div class="recipe-content">
                        <h3>${result.data.title}</h3>
                        <p>${result.data.description}</p>
                        ${matchInfo}
                    </div>
                `;

          card.addEventListener("click", () => {
            this.showRecipeDetail(result.data.id);
          });

          return card;
        }

        /**
         * Masque les r√©sultats de recherche
         */
        hideSearchResults() {
          const searchResults = document.getElementById("search-results");
          if (searchResults) {
            searchResults.style.display = "none";
          }
        }

        /**
         * Affiche le d√©tail d'une recette
         */
        showRecipeDetail(recipeId) {
          const recipe = recipes.find((r) => r.id === recipeId);
          if (!recipe) return;

          this.currentRecipe = recipe;
          const modal = document.getElementById("recipe-modal");
          const modalTitle = document.getElementById("modal-recipe-title");
          const modalBody = document.getElementById("modal-body");

          if (!modal || !modalTitle || !modalBody) return;

          modalTitle.textContent = recipe.title;
          modalBody.innerHTML = this.generateRecipeDetailHTML(recipe);

          modal.classList.add("active");
          document.body.style.overflow = "hidden";

          // Bind events pour les commentaires
          this.bindCommentEvents(recipeId);
        }

       
       //  Lie les √©v√©nements pour les commentaires
         
        bindCommentEvents(recipeId) {
          const commentForm = document.getElementById("comment-form");
          if (!commentForm) return;

          commentForm.addEventListener("submit", (e) => {
            e.preventDefault();
            this.submitComment(recipeId, new FormData(commentForm));
          });
        }

        /**
         * Soumet un nouveau commentaire
         */
        submitComment(recipeId, formData) {
          const username = formData.get("username");
          const rating = parseInt(formData.get("rating"));
          const content = formData.get("content");

          // Validation basique
          if (!username || !rating || !content) {
            this.showNotification("Veuillez remplir tous les champs", "error");
            return;
          }

          // Cr√©er un nouveau commentaire
          const newComment = {
            id: recipeComments.length + 1,
            username: username.trim(),
            content: content.trim(),
            note: rating,
            createdAt: new Date(),
            recipeId: recipeId,
          };

          // Ajouter le commentaire aux donn√©es
          recipeComments.push(newComment);

          // Recharger les d√©tails de la recette
          this.showRecipeDetail(recipeId);

          this.showNotification("Commentaire ajout√© avec succ√®s !", "success");
        }

        /**
         * Formate une date
         */
        formatDate(date) {
          const options = {
            year: "numeric",
            month: "long",
            day: "numeric",
            hour: "2-digit",
            minute: "2-digit",
          };
          return new Intl.DateTimeFormat("fr-FR", options).format(
            new Date(date)
          );
        }

        /**
         * Ferme la modal
         */
        closeModal() {
          const modal = document.getElementById("recipe-modal");
          if (modal) {
            modal.classList.remove("active");
            document.body.style.overflow = "";
            this.currentRecipe = null;
          }
        }

        /**
         * Met √† jour les statistiques du footer
         */
        updateStats() {
          const totalRecipesEl = document.getElementById("total-recipes");
          const totalCategoriesEl = document.getElementById("total-categories");

          if (totalRecipesEl) {
            totalRecipesEl.textContent = recipes.length;
          }

          if (totalCategoriesEl) {
            totalCategoriesEl.textContent = categories.length;
          }
        }

        /**
         * Affiche une notification
         */
        showNotification(message, type = "success") {
          const notification = document.getElementById("notification");
          const notificationMessage = document.getElementById(
            "notification-message"
          );

          if (!notification || !notificationMessage) return;

          notificationMessage.textContent = message;
          notification.className = `notification ${type}`;
          notification.style.display = "flex";

          // Auto-hide apr√®s 5 secondes
          setTimeout(() => {
            this.hideNotification();
          }, 5000);
        }

        /**
         * Masque la notification
         */
        hideNotification() {
          const notification = document.getElementById("notification");
          if (notification) {
            notification.style.display = "none";
          }
        }

        /**
         * Gestion de la navigation active
         */
        updateActiveNavigation() {
          const sections = document.querySelectorAll("section[id]");
          const navLinks = document.querySelectorAll(".nav-link");

          const observer = new IntersectionObserver(
            (entries) => {
              entries.forEach((entry) => {
                if (entry.isIntersecting) {
                  const id = entry.target.getAttribute("id");

                  // Retirer la classe active de tous les liens
                  navLinks.forEach((link) => link.classList.remove("active"));

                  // Ajouter la classe active au lien correspondant
                  const activeLink = document.querySelector(
                    `.nav-link[href="#${id}"]`
                  );
                  if (activeLink) {
                    activeLink.classList.add("active");
                  }
                }
              });
            },
            {
              rootMargin: "-50% 0px -50% 0px",
            }
          );

          sections.forEach((section) => {
            observer.observe(section);
          });
        }
      }

      // === UTILITAIRES GLOBAUX ===

      /**
       * Classe utilitaire pour la gestion des animations
       */
      class AnimationUtils {
        static fadeIn(element, duration = 300) {
          element.style.opacity = "0";
          element.style.display = "block";

          let start = null;
          const animate = (timestamp) => {
            if (!start) start = timestamp;
            const progress = timestamp - start;

            element.style.opacity = Math.min(progress / duration, 1);

            if (progress < duration) {
              requestAnimationFrame(animate);
            }
          };

          requestAnimationFrame(animate);
        }

        static slideDown(element, duration = 300) {
          element.style.height = "0px";
          element.style.overflow = "hidden";
          element.style.display = "block";

          const fullHeight = element.scrollHeight;
          let start = null;

          const animate = (timestamp) => {
            if (!start) start = timestamp;
            const progress = timestamp - start;

            element.style.height =
              Math.min((progress / duration) * fullHeight, fullHeight) + "px";

            if (progress < duration) {
              requestAnimationFrame(animate);
            } else {
              element.style.height = "";
              element.style.overflow = "";
            }
          };

          requestAnimationFrame(animate);
        }
      }

      /**
       * Classe pour la gestion des donn√©es locales
       */
      class DataManager {
        static saveToStorage(key, data) {
          try {
            // Note: localStorage n'est pas disponible dans les artifacts Claude
            // Cette m√©thode est pr√™te pour une impl√©mentation future
            console.log(`Sauvegarde ${key}:`, data);
          } catch (error) {
            console.error("Erreur lors de la sauvegarde:", error);
          }
        }

        static loadFromStorage(key, defaultValue = null) {
          try {
            // Note: localStorage n'est pas disponible dans les artifacts Claude
            // Cette m√©thode retourne la valeur par d√©faut
            console.log(`Chargement ${key}, valeur par d√©faut:`, defaultValue);
            return defaultValue;
          } catch (error) {
            console.error("Erreur lors du chargement:", error);
            return defaultValue;
          }
        }

        static exportData() {
          return {
            categories,
            ingredients,
            recipeIngredients,
            recipeInstructions,
            recipes,
            recipeComments,
          };
        }
      }

      /**
       * Classe pour la validation des formulaires
       */
      class FormValidator {
        static validateComment(formData) {
          const errors = [];

          const username = formData.get("username")?.trim();
          const rating = formData.get("rating");
          const content = formData.get("content")?.trim();

          if (!username || username.length < 2) {
            errors.push(
              "Le nom d'utilisateur doit contenir au moins 2 caract√®res"
            );
          }

          if (!rating || rating < 1 || rating > 5) {
            errors.push("Veuillez s√©lectionner une note entre 1 et 5");
          }

          if (!content || content.length < 10) {
            errors.push("Le commentaire doit contenir au moins 10 caract√®res");
          }

          return {
            isValid: errors.length === 0,
            errors,
          };
        }

        static sanitizeInput(input) {
          return input
            .replace(/[<>]/g, "") // Supprime les balises HTML de base
            .trim();
        }
      }

      // === INITIALISATION DE L'APPLICATION ===

      // Attendre que le DOM soit charg√©
      document.addEventListener("DOMContentLoaded", () => {
        // Initialiser l'application principale
        const app = new MarmiplonApp();

        // Activer la navigation active
        app.updateActiveNavigation();

        // Log pour le d√©veloppement
        console.log("üç≥ Marmiplon Application initialis√©e avec succ√®s!");
        console.log("üìä Donn√©es charg√©es:", {
          categories: categories.length,
          recipes: recipes.length,
          ingredients: ingredients.length,
          comments: recipeComments.length,
        });

        // Exposer l'app pour le d√©bogage (d√©veloppement uniquement)
        if (typeof window !== "undefined") {
          window.MarmiplonApp = app;
          window.DataManager = DataManager;
        }
      });

      // === GESTION DES ERREURS GLOBALES ===
      window.addEventListener("error", (e) => {
        console.error("Erreur JavaScript:", e.error);

        // Afficher une notification d'erreur √† l'utilisateur
        const app = window.MarmiplonApp;
        if (app && typeof app.showNotification === "function") {
          app.showNotification("Une erreur inattendue s'est produite", "error");
        }
      });

      // === SERVICE WORKER (pour les fonctionnalit√©s PWA futures) ===
      if ("serviceWorker" in navigator) {
        window.addEventListener("load", () => {
          // Note: Le service worker pourrait √™tre ajout√© dans une version future
          console.log("üîß Service Worker support d√©tect√©");
        });
      }
    </script>
  
</html>
<%- include("../partials/footer") %>
